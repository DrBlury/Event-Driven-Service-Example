---
version: 3

dotenv: [".env"]

tasks:
  gen-env-files:
    desc: "Generate all .env files from example folder into env folder"
    cmds:
      - echo "Generating all .env files from example folder into env folder"
      - cp env/example/app.env.example env/app.env
      - cp env/example/kafdrop.env.example env/kafdrop.env
      - cp env/example/kafka.env.example env/kafka.env
      - cp env/example/mongo-express.env.example env/mongo-express.env
      - cp env/example/mongo.env.example env/mongo.env
      - cp env/example/openobserve.env.example env/openobserve.env
      - cp env/example/rabbitmq.env.example env/rabbitmq.env
      - cp env/example/localstack.env.example env/localstack.env
    silent: true

  use-kafka:
    desc: "Switch to Kafka (disable RabbitMQ in compose, set PUBSUB_SYSTEM=kafka)"
    cmds:
      - echo "Switching to Kafka (setting PUBSUB_SYSTEM=kafka and commenting out rabbitmq)"
      - "sed -i '' 's/^PUBSUB_SYSTEM=.*/PUBSUB_SYSTEM=kafka/' env/app.env"
      # Comment out rabbitmq service
      - "sed -i '' '/^  rabbitmq:/,/^$/s/^/## /' compose.yaml"
    silent: true

  use-rabbitmq:
    desc: "Switch to RabbitMQ (disable Kafka in compose, set PUBSUB_SYSTEM=rabbitmq)"
    cmds:
      - echo "Switching to RabbitMQ (disabling Kafka, enabling RabbitMQ in compose.yaml, setting PUBSUB_SYSTEM=rabbitmq)"
      - "sed -i '' 's/^PUBSUB_SYSTEM=.*/PUBSUB_SYSTEM=rabbitmq/' env/app.env"
      # Comment out kafka and kafdrop services
      - "sed -i '' '/^  kafka:/,/^$/s/^/## /' compose.yaml"
      - "sed -i '' '/^  kafdrop:/,/^$/s/^/## /' compose.yaml"
    silent: true

  start:
    desc: "Run the docker compose file"
    cmds:
      - echo "Starting the application with docker."
      - docker compose up --build
    silent: true

  build-image:
    desc: "Build the docker image"
    cmds:
      - echo "Building the docker image"
      - docker build -t cpc-contract-facade -f build/dockerfiles/Dockerfile.app .
    silent: true

  start-debug:
    desc: "Run the debug docker compose file"
    cmds:
      - echo "Starting the application with debug docker compose file."
      - docker compose -f docker-compose.yml up --build --no-log-prefix
      - echo "You can now connect delve via port 2345 to the container for remote debugging"
    silent: true

  lint:
    desc: "Lint the project using golangci-lint"
    cmds:
      - echo "linting the project"
      - docker run --rm -v "./src:/code" golangci/golangci-lint:latest /bin/sh -c "cd /code && golangci-lint run"
    silent: true

  lint-api:
    desc: "Lint the api using redocly"
    cmds:
      - echo "Linting the api"
      - docker run --rm -v ./api/:/spec redocly/cli lint api.yml
    silent: true

  bundle-api:
    desc: "Bundle the api using redocly"
    cmds:
      - echo "Bundling the api using redocly/redoc"
      - docker run --rm -v ./api/:/spec redocly/cli bundle api.yml -o bundle.yml
    silent: true

  gen-embedded-api:
    desc: "Generate the embedded json for the api"
    cmds:
      - echo "Generating the embedded json for the api"
      - docker run --rm -v ./api/:/spec redocly/cli bundle api.yml -o openapi.json
      - mv ./api/openapi.json ./src/internal/server/handler/apihandler/embedded/openapi.json
    silent: true

  gen-api-std:
    desc: "Generate the api wrapper interfaces for std server using oapi-codegen"
    cmds:
      - echo "Generate the api wrapper interfaces for std server using oapi-codegen"
      - cd ./src/internal/server/handler/apihandler && go tool oapi-codegen -config ./server-std.cfg.yml ./embedded/openapi.json > ../../generated/api.gen.go
    silent: true

  gen-api:
    desc: "Generate the api for the server using oapi-codegen"
    cmds:
      - echo "Generating the api for the server using oapi-codegen"
      - task lint-api
      - task bundle-api
      - task gen-embedded-api
      - task gen-api-std
    silent: true

  gen-buf:
    desc: "Generate the go files from the protobuf definition using buf"
    cmds:
      - echo "Generating the go files from the protobuf definition"
      - docker build -t drblury/protobuf-gen-go -f ./build/dockerfiles/Dockerfile.protobuf .
      - docker run --rm -v $(pwd):/workspace --workdir /workspace drblury/protobuf-gen-go generate
    silent: true

  install-tools:
    desc: "Install the local tools globally"
    cmds:
      - echo "Installing go based tools"
      -  # for the binary install
      - go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - npm install -g @stoplight/prism-cli

  scc:
    desc: "Run scc to show stats"
    cmds:
      - echo "Running scc to show stats"
      - docker run --rm -it -v "$PWD:/pwd"  ghcr.io/lhoupert/scc:master scc /pwd
    silent: true
