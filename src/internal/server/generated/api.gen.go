//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ErrorType.
const (
	BADREQUEST          ErrorType = "BAD REQUEST"
	INTERNALSERVERERROR ErrorType = "INTERNAL SERVER ERROR"
	NOTFOUND            ErrorType = "NOT FOUND"
	NOTIMPLEMENTED      ErrorType = "NOT IMPLEMENTED"
)

// Defines values for Status.
const (
	HEALTHY   Status = "HEALTHY"
	UNHEALTHY Status = "UNHEALTHY"
	UNKNOWN   Status = "UNKNOWN"
)

// Error This object holds the error response data.
type Error struct {
	// Code The error code
	Code int `json:"code"`

	// Error The error message
	Error string `json:"error"`

	// ErrorId The unique identifier for the error
	ErrorId string `json:"errorId"`

	// ErrorType The error type
	ErrorType ErrorType `json:"errorType"`

	// Timestamp The time the error occurred
	Timestamp string `json:"timestamp"`
}

// ErrorType The error type
type ErrorType string

// Status The status of the API
type Status string

// Version This object holds the API version data.
type Version struct {
	// BuildDate The date the code was built
	BuildDate string `json:"buildDate"`

	// CommitDate The date of the commit
	CommitDate string `json:"commitDate"`

	// CommitHash The hash of the commit
	CommitHash string `json:"commitHash"`

	// Details A description of the API
	Details string `json:"details"`

	// Version The version of the API
	Version string `json:"version"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	m.HandleFunc("GET "+options.BaseURL+"/info/status", wrapper.GetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/info/version", wrapper.GetVersion)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXUXPaOBD+K5q9ezTYBpI0fuNat6GXQkpoO20vD4q9YHWw5EoyTabDf7+RbGMTG0Jv",
	"5mb6Jixpv2+/b7USPyESaSY4cq0g+AkqSjCldhhKKaQZxKgiyTLNBIcAFglTRNx/w0iTRKxjRXSCBM1i",
	"IlFlgiskMdW0Dw7gA02zNZookYgRgpE3cgCLyLBIkDCNKYkFKsKFJvjAlIZyxSSGAPzBEEdn5xc9fHF5",
	"3/MH8bBHR2fnvdHg/Nwf+Rcjz/OqDYvHDCGAqdDktch5DA5olqLSNM0ggIE38Hr+oDf0F4NhcHYZnF1+",
	"ga0DmRQZSs1Q1TzbWVc52vlGZjYjXSAzrnGF0gTFQ+pVcVJUiq72Qh0RpARQWjK+2sU3CnUh5Jx9z5Gw",
	"GLlmS4aSLIWsfdrDPFHgbgKF4j/hT4lLCOAPt64mtywlN9wt3O750UXcTDfqSURRLiXGe4StjZ7f8/yF",
	"Pwg8L/C8L+DAUsiUaghALqPhcHjZ5rx1QOL3nJmAwdedgpVXzZQcKG2u+d7t4hXFb7IJmxocMloXAZHn",
	"qYH9a/yKzMP3H8LbBTgwnS3I69mH6atyPHl3cx2+C6eL0HyZTBfhfDq+Jrfh/GM4J+F8PpsbJrUa++Fa",
	"Lt1qqnPVTU/ZOSKWVvHxzaTB8iocXy+uPoMDH6bN8d/T2afpPoN6uoX+EaWyeKc1kfHNhGyKLV0d5D5n",
	"6/gV1ftFYL1KU6abM09PebXmiqoEAvBifzQa0fj+0r9AGkUX/nDgL/3BC//SGy0v/OgMhxcvIgoOxKgp",
	"W6uKM1OEckPUcNtU6YHf9/peu5c0GHcZEFNdVLspNvKDKmI26APV3iVwM/ODCKXBxdp28LZWB2AK8bpg",
	"EqqSIzC/IHcLeqf/U9wxafx+UsSNhlp4VlVX1QYfiEK5YRF2QW4OVy3u6vMAYFEIz7WeCsFpVEid6p7e",
	"ex63e9DWAYVRLpl+vDX9tqw7pBLlONdJ/et11R/ffjKdwnZnE6mYrSknWmewNYEZX4riRuSaRtoMObV7",
	"rj9P3y/Cl1fkTXp/BQ7kcl3uVIHrRqq/fuTf+xqjxC08bKoYFmLt/MANck1iyTbIiWIrnmfgwJpFyBU2",
	"QHNefWsCBq67m+gLuXKLW0ZbN25mL0low99Wceszu6YalW3jIkNOMwYBDPtefwgOZFQnVknXiOCWC/qJ",
	"Ttfm6wp1uzrmqCXDTXGiZxlyk6DKMCJUkavFu2uwSJKa9fZt8wZ1ua6crt5PFnrgeZX6yC2exgftVhyK",
	"69WM6ur7J/e8YWRW2BH2+/3ik1t/6yjOlkWm0CXyGCXGlvru4DTzMtKNWiRplq1ZZJN0v6niGNVcn30o",
	"dNH5LHKiRIqJ+EFSyukKY6KFfUGRPLO8BM0YMUkSc86sr42jAcHXOwdUnqZUPhbCl93jnvFVsU8sSWlz",
	"kZwDmq6UOa3jm8nEHIU7E3K/IKoEf70g3t7OpkcKopx+piC6tK4vzK3TEP5p3+j0vJPk7+aygTvZ5aal",
	"JiPL9ai1avdiet7U/RdUfaW0XC2fYf/J0NNkLREOGNtN9DdytiR4qq2HhD/ia+NWf97Y6pY3O0+w9+Pu",
	"Pv/f/K0gDhj85FnyGzpcMTzV4uMWdBht40mzDYKvnX84iund8wG2d9t/AwAA//9dDKcbABEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
